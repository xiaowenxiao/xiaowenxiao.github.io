<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>x&#39;Blog</title>
    <link>https://xiaowenxiao.github.io/</link>
    <description>Recent content on x&#39;Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Dec 2020 15:12:44 +0800</lastBuildDate>
    
        <atom:link href="https://xiaowenxiao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s的健康检查</title>
      <link>https://xiaowenxiao.github.io/k8s%E7%9A%84%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:44 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/k8s%E7%9A%84%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5/</guid>
      <description>k8s的健康检查 默认的健康检查 强大的自愈能力是 Kubernetes 这类容器编排引擎的一个重要特性。自愈的默认实现方式是自动重启发生故障的容器。除此之外，用户还</description>
    </item>
    
    <item>
      <title>ingress-nginx部署</title>
      <link>https://xiaowenxiao.github.io/ingress-nginx%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:43 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/ingress-nginx%E9%83%A8%E7%BD%B2/</guid>
      <description>ingress-nginx部署 Ingress 与 ingress-controller Ingress 是 kubernetes 的一种资源对象，该对象允许外部访问 kubernetes 服务， 通过创建规则集合来配置访问权限，这些规则定义了哪些入站连</description>
    </item>
    
    <item>
      <title>StatefulSet部署jenkins</title>
      <link>https://xiaowenxiao.github.io/statefulset%E9%83%A8%E7%BD%B2jenkins/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:43 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/statefulset%E9%83%A8%E7%BD%B2jenkins/</guid>
      <description>StatefulSet部署jenkins ![PVC、PV动态供给](_v_images/20200603185604805_23577.pn</description>
    </item>
    
    <item>
      <title>K8s集群部署</title>
      <link>https://xiaowenxiao.github.io/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:42 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid>
      <description>K8s集群部署 环境 主机名 系统版本 ip 角色 master-01 Ubuntu 18.04.4 LTS 10.10.10.1 master、ndoe、etcd1 master-02 Ubuntu 18.04.4 LTS 10.10.10.2 master、ndoe、etcd2 master-03 Ubuntu 18.04.4 LTS 10.10.10.3 ma</description>
    </item>
    
    <item>
      <title>Pro etheus监控告警</title>
      <link>https://xiaowenxiao.github.io/prometheus%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:42 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/prometheus%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/</guid>
      <description>参考书籍： prometheus-book 监控-Prometheus+Grafana+node-exporter Prometheus告警简介 从架构图中可以看出其大概的工作</description>
    </item>
    
    <item>
      <title>Harbor</title>
      <link>https://xiaowenxiao.github.io/harbor/</link>
      <pubDate>Thu, 24 Dec 2020 15:12:41 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/harbor/</guid>
      <description>Harbor 软件包：harbor-offline-installer-v2.0.0.tgz Harbor仓库安装 # 解压 docker-compose，放到</description>
    </item>
    
    <item>
      <title>EFK部署</title>
      <link>https://xiaowenxiao.github.io/efk%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 24 Dec 2020 15:02:22 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/efk%E9%83%A8%E7%BD%B2/</guid>
      <description>EFK部署 参考链接： 阳明的博客</description>
    </item>
    
    <item>
      <title>k8s暴露外部应用服务</title>
      <link>https://xiaowenxiao.github.io/k8s%E6%9A%B4%E9%9C%B2%E5%A4%96%E9%83%A8%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 24 Dec 2020 14:54:44 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/k8s%E6%9A%B4%E9%9C%B2%E5%A4%96%E9%83%A8%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1/</guid>
      <description>k8s暴露外部应用服务 外部的应用（ip+端口）以service的方式在k8s集群暴露 &amp;gt;&amp;gt; cat jumpserver.yaml apiVersion: v1 kind: Service metadata: name: jumpserver-service spec: ports: - port: 80 protocol: TCP targetPort: 80 --- apiVersion: v1 kind: Endpoints metadata: name: jumpserver-service subsets:</description>
    </item>
    
    <item>
      <title>K8s命令</title>
      <link>https://xiaowenxiao.github.io/k8s%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 24 Dec 2020 14:47:26 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/k8s%E5%91%BD%E4%BB%A4/</guid>
      <description>K8s命令 创建 kubectl run nginx --replicas=1 --labels=&amp;#34;app=nginx-example&amp;#34; --image=nginx:1.10 --port=80 查看 kubectl get deploy kubectl get pods --show-labels kubectl get pods -l app=example kubectl get pods -o wide 发布 kubectl expose deployment nginx --port=88 --type=NodePort --target-port=80 --name=nginx-service kubectl describe service nginx-service 故障排查 kubectl describe TYPE NAME_PREFIX kubectl logs nginx-xxx kubectl exec -ti nginx-xxx bash 更新 kubectl set image deployment/nginx nginx=nginx:1.11</description>
    </item>
    
    <item>
      <title>Linux文件描述符</title>
      <link>https://xiaowenxiao.github.io/linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/linux%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6/</guid>
      <description>文件描述符 文件描述符的定义 文件描述符是内核为了高效管理已被打开的文件所创建的索引，用于指向被打开的文件，所有执行I/O操作的系统调用都通过文</description>
    </item>
    
    <item>
      <title>nginx配置详解</title>
      <link>https://xiaowenxiao.github.io/nginx%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/nginx%E9%85%8D%E7%BD%AE/</guid>
      <description>nginx配置文件说明 参考： https://blog.csdn.net/WanJiaBaoBao/article/details/83349622 https://www.cnblogs.com/xzkzzz/p/9224358.html https://www.myfreax.com/nginx-caching-guide/ https://www.cnblogs.com/liuxia912/p/11075630.html 自动生成nginx配置文件： https://www.digitalocean.com/community/tools/nginx#? # set_real_ip_from：真实服务器上一级代理的IP地址或者IP</description>
    </item>
    
    <item>
      <title>systemd服务</title>
      <link>https://xiaowenxiao.github.io/systemd%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/systemd%E6%9C%8D%E5%8A%A1/</guid>
      <description>systemd服务 Systemd (简体中文) Systemd 入门教程：命令篇 Systemd 入门教程：实战篇 例子： &amp;gt;&amp;gt; cat /etc/systemd/system/prometheus.service [Unit] Description=prometheus After=network.target After=network-online.target Wants=network-online.target [Service] #Type=notify PermissionsStartOnly=yes ExecStart=/srv/prometheus/prometheus --config.file=/srv/prometheus/prometheus.yml Restart=always #RestartSec=15s #TimeoutStartSec=30s LimitNOFILE=65536 [Install] WantedBy=multi-user.target - **[Unit]区块通常是</description>
    </item>
    
    <item>
      <title>一些原理介绍</title>
      <link>https://xiaowenxiao.github.io/%E4%B8%80%E4%BA%9B%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/%E4%B8%80%E4%BA%9B%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D/</guid>
      <description>一些原理介绍 ssh加密传输原理 感谢数学家和计算机科学家，RSA 就是这样一种非对称加密方式，也就是： 使用算法可以生成两把钥匙 A 和 B 使用 A 加密的</description>
    </item>
    
    <item>
      <title>内存CPU占用分析</title>
      <link>https://xiaowenxiao.github.io/%E5%86%85%E5%AD%98cpu%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/%E5%86%85%E5%AD%98cpu%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90/</guid>
      <description>内存 什么是page cache？ Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候</description>
    </item>
    
    <item>
      <title>实用网站</title>
      <link>https://xiaowenxiao.github.io/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/%E5%AE%9E%E7%94%A8%E7%BD%91%E7%AB%99/</guid>
      <description>实用网站 Linux Tools Quick Tutorial shell-book 必知的Linux命令技巧1 Bash 脚本教程</description>
    </item>
    
    <item>
      <title>编写可靠的bash脚本</title>
      <link>https://xiaowenxiao.github.io/%E7%BC%96%E5%86%99%E5%8F%AF%E9%9D%A0%E7%9A%84bash%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Wed, 23 Dec 2020 16:16:02 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/%E7%BC%96%E5%86%99%E5%8F%AF%E9%9D%A0%E7%9A%84bash%E8%84%9A%E6%9C%AC/</guid>
      <description>编写可靠的bash脚本 1、set -x -e -u -o pipefail 写过很多bash脚本的人都知道，bash的坑不是一般的多。 其实bash本身并不是一个很严谨的语言，</description>
    </item>
    
    <item>
      <title>win10配置ubuntu子系统</title>
      <link>https://xiaowenxiao.github.io/win10ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 23 Dec 2020 15:53:42 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/win10ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>配置达到的效果 子系统随win10开机一起启动（跟未装子系统开机时间比较无明显差异） ssh服务配置开机自启，无需其他操作开机直接连接xhell</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://xiaowenxiao.github.io/about/</link>
      <pubDate>Tue, 15 Dec 2020 15:21:08 +0800</pubDate>
      
      <guid>https://xiaowenxiao.github.io/about/</guid>
      <description>ฅ۶•ﻌ•♡</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiaowenxiao.github.io/hugo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiaowenxiao.github.io/hugo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/</guid>
      <description>hugo自动发布脚本 #!/bin/bash set -x FILE_PATH=$(pwd) usage() { echo &amp;#34;Usage: $0-c [CATEGORIES] -t [Tags] -m [MESSAGE] -f [FILE_LIST]&amp;#34; exit 0 } input_yaml() { FILE_NAME=$(echo ${FILE##*/}) NAME=$(echo &amp;#34;${FILE_NAME}&amp;#34; | tr &amp;#39;.md&amp;#39; &amp;#39; &amp;#39;) DATE=$(date +&amp;#34;%Y-%m-%d&amp;#34;)T$(date +&amp;#34;%H:%M:%S&amp;#34;)+08:00 cd ${FILE_PATH} grep title ${FILE} if [[ $? != 0 ]];then if [[ ! ${Tags} ]];then sed -i &amp;#34;1i---\ntitle: ${NAME}\ndate: ${DATE}\ndraft: false\nCategories: [&amp;#34;${CATEGORIES}&amp;#34;]\n---&amp;#34; ${FILE} else sed -i &amp;#34;1i---\ntitle: ${NAME}\ndate: ${DATE}\ndraft: false\nCategories: [&amp;#34;${CATEGORIES}&amp;#34;]\nTags: [&amp;#34;${Tags}&amp;#34;]\n---&amp;#34; ${FILE} fi fi } move() { cp -rf ${FILE} /opt/myBlog/content/ cd /opt/myBlog/ rm -rf public rm -rf xiaowenxiao.</description>
    </item>
    
  </channel>
</rss>
